name: Deploy Jekyll site to GitHub Pages

on:
  push:
    branches: ["master"]
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 0" # Every sunday

concurrency:
  group: "pages"
  cancel-in-progress: false

permissions:
  contents: read
  pages: write
  id-token: write

env:
  UBUNTU_REPO_NAME: ubuntu

jobs:
  build-debs:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ["amd64", "arm64"]
        package:
          - { author: "MetaCubeX", name: "mihomo" }
          - { author: "fatedier", name: "frp" }
    steps:
      - name: Get latest tag
        run: |
          tag="$(curl -s https://api.github.com/repos/${{ matrix.package.author }}/${{ matrix.package.name }}/releases/latest | jq -r .tag_name)"
          echo "tag=$tag" >> $GITHUB_ENV
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get mihomo deb
        if: matrix.package.name == 'mihomo'
        run: |
          if [ "${{ matrix.arch }}" == "amd64" ]; then
            name="mihomo-linux-amd64-v3-$tag"
          else
            name="mihomo-linux-${{ matrix.arch }}-$tag"
          fi
          wget -q "https://github.com/${{ matrix.package.author }}/mihomo/releases/download/${tag}/${name}.deb"
      - name: Build frp deb
        if: matrix.package.name == 'frp'
        run: |
          suffix="${tag#v}_linux_${{ matrix.arch }}"
          name="frp_${suffix}"
          wget -q "https://github.com/fatedier/frp/releases/download/${tag}/${name}.tar.gz"
          tar xvf "${name}.tar.gz"
          sudo gem install fpm
          for t in frpc frps; do
            cp .github/deb/frp/.fpm_${t} .fpm
            fpm -t deb \
              -v "${tag#v}" \
              -p "${t}_${suffix}.deb" \
              --architecture "${{ matrix.arch }}" \
              ${name}/${t}=/usr/bin/${t}
          done
      - name: Inject GPG key and APT repository
        run: |
          set -euo pipefail
          sudo apt update && sudo apt install -y gnupg
          echo '${{ secrets.PGP_PRIVATE_KEY }}' | gpg --import
          gpg --armor --export ${{ vars.EMAIL }} > pubkey.gpg
          export PUBKEY=pubkey.gpg
          export REPO=${{ env.UBUNTU_REPO_NAME }}
          find . -maxdepth 1 -name "*.deb" | xargs -I{} ./.github/deb/repack.sh {} {}
      - name: Upload debs
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.package.name }}-${{ matrix.arch }}-deb
          path: "*.deb"
    
  build-pages:
    runs-on: ubuntu-latest
    needs:
      - build-debs
    steps:
      - name: Import GPG key
        run: |
          sudo apt update && sudo apt install -y aptly
          echo '${{ secrets.PGP_PRIVATE_KEY }}' | gpg --import
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download debs
        uses: actions/download-artifact@v4
        with:
          path: debs
          pattern: '*-deb'
          merge-multiple: true
      - name: Prepare ubuntu repo
        run: |
          aptly repo create -distribution=stable -component=main ubuntu-repo
          aptly repo add ubuntu-repo debs
          aptly publish repo -gpg-key=${{ vars.EMAIL }} ubuntu-repo
          cp -r ~/.aptly/public ./${{ env.UBUNTU_REPO_NAME }}
      - name: Create nodes
        run: find ./${{ env.UBUNTU_REPO_NAME }} -type d | sed 's|/$||g' | xargs -I{} touch "{}/index.md"
      - name: Setup Ruby
        # https://github.com/ruby/setup-ruby/releases/tag/v1.207.0
        uses: ruby/setup-ruby@4a9ddd6f338a97768b8006bf671dfbad383215f4
        with:
          ruby-version: "3.1" # Not needed with a .ruby-version file
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
          cache-version: 0 # Increment this number if you need to re-download cached gems
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      - name: Build with Jekyll
        # Outputs to the './_site' directory by default
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production
      - name: Upload artifact
        # Automatically uploads an artifact from the './_site' directory by default
        uses: actions/upload-pages-artifact@v3
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build-pages
    steps:
      - uses: actions/deploy-pages@v4
        id: deployment
